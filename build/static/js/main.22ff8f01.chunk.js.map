{"version":3,"sources":["api/index.js","components/NewContactForm.js","components/EditContactForm.js","components/CommentList.js","components/NewCommentForm.js","components/ContactList.js","index.js"],"names":["url","a","method","sendData","fetchOptions","headers","body","JSON","stringify","fetch","response","json","data","fetchAPI","contact_types","ContactForm","props","addContact","useState","contactType","setContactType","name","setName","email","setEmail","address","setAddress","phoneNumber","setPhoneNumber","onSubmit","event","preventDefault","then","contact","catch","error","console","type","value","onChange","target","map","contactTypeValue","idx","activeContact","replaceContact","wipeActiveContact","useEffect","onClick","CommentList","comments","removeComment","length","comment","key","contents","CommentForm","addComment","content","setContent","ContactList","contacts","setActiveContact","removeOldContact","NewCommentForm","App","setContacts","log","EditContactForm","oldContactInfo","newContactInfo","newContactsList","NewContactForm","deletedContact","filter"],"mappings":"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","file":"static/js/main.22ff8f01.chunk.js","sourcesContent":["async function fetchAPI(url, method=\"GET\", sendData=null) {\n    const fetchOptions = {\n      method: method,\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': 'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InNhdWNlMDA3IiwiaWF0IjoxNjA2MDczMjU2LCJleHAiOjE2MDY2NzgwNTZ9.c4yD6Onw7KskEKWPF33spWw8gEdtDN-JUKUWrg3CdtI'\n      }\n    };\n  \n    if (sendData) {\n      fetchOptions.body = JSON.stringify(sendData);\n    }\n  \n    const response = await fetch(url, fetchOptions);\n    const data = await response.json();\n  \n    return data;\n  }\n\n  export default fetchAPI;","import React, {useState} from \"react\";\nimport fetchAPI from \"../api\";\n\nconst contact_types = [\"personal\", \"other\", \"work\"];\n\nconst ContactForm = (props) => {\n    const {addContact} = props;\n\n    const [contactType, setContactType] = useState(contact_types[0]);\n    const [name, setName] = useState(\"\");\n    const [email, setEmail] = useState(\"\");\n    const [address, setAddress] = useState(\"\");\n    const [phoneNumber, setPhoneNumber] = useState(\"\");\n\n    return (\n        <form onSubmit={(event) => {\n            event.preventDefault();\n            const contactInfo = {contactType, name, email, address, phoneNumber};\n            const url = \"https://univ-contact-book.herokuapp.com/api/contacts\";\n            fetchAPI(url, \"POST\", contactInfo)\n                .then(function (response) {\n                    addContact(response.contact);\n                })\n                .catch(function (error) {\n                    console.error(\"error submitting new contact form\", error);\n                })\n        }}> \n        <h1>Add New Contact</h1>\n        <label>Contact Type</label>\n        <label>Name</label>\n        <input \n            type=\"text\"\n            value={name}\n            onChange={(event) => setName(event.target.value)}/>\n        <label>Email</label>\n        <input \n            type=\"text\"\n            value={email}\n            onChange={(event) => setEmail(event.target.value)}/>\n        <label>Address</label>\n        <input \n            type=\"text\"\n            value={address}\n            onChange={(event) => setAddress(event.target.value)}/>\n        <label>Phone Number</label>\n        <input \n            type=\"text\"\n            value={phoneNumber}\n            onChange={(event) => setPhoneNumber(event.target.value)}/>\n         <select \n            value={contactType}\n            onChange={(event) => setContactType(event.target.value)}>\n            {contact_types.map((contactTypeValue, idx) => {\n            // <option value={contactTypeValue} key={idx}>\n            //     {contactTypeValue};\n            // </option>\n       \n      \n       \n        })};\n       </select>;  \n       <button>Submit</button>;\n\n\n\n\n        </form>\n    );\n}\n\nexport default ContactForm;","import React, { useState, useEffect } from \"react\";\nimport fetchAPI from \"../api\";\n\nconst contact_types = [\"personal\", \"other\", \"work\"];\n\nconst ContactForm = (props) => {\n  const { activeContact, replaceContact, wipeActiveContact } = props;\n\n  const [contactType, setContactType] = useState(activeContact.contactType);\n  const [name, setName] = useState(activeContact.name);\n  const [email, setEmail] = useState(activeContact.email);\n  const [address, setAddress] = useState(activeContact.address);\n  const [phoneNumber, setPhoneNumber] = useState(activeContact.phoneNumber);\n\n  useEffect(() => {\n    setContactType(activeContact.contactType);\n    setName(activeContact.name);\n    setEmail(activeContact.email);\n    setAddress(activeContact.address);\n    setPhoneNumber(activeContact.phoneNumber);\n  }, [activeContact]);\n\n  return (\n    <form\n      onSubmit={(event) => {\n        event.preventDefault();\n        const contactInfo = { contactType, name, email, address, phoneNumber };\n        const url =\n          \"https://univ-contact-book.herokuapp.com/api/contacts/${activeContact.id}\";\n        fetchAPI(url, \"PATCH\", contactInfo)\n          .then(function (response) {\n            replaceContact(activeContact, response.contact);\n            wipeActiveContact();\n          })\n          .catch(function (error) {\n            console.error(\"error editing new contact form\", error);\n          });\n      }}\n    >\n      ;<h1>Edit Contact</h1>\n      <label>Name</label>\n      <input\n        type=\"text\"\n        value={name}\n        onChange={(event) => setName(event.target.value)}\n      />\n      <label>Email</label>\n      <input\n        type=\"text\"\n        value={email}\n        onChange={(event) => setEmail(event.target.value)}\n      />\n      <label>Address</label>\n      <input\n        type=\"text\"\n        value={address}\n        onChange={(event) => setAddress(event.target.value)}\n      />\n      <label>Phone Number</label>\n      <input\n        type=\"text\"\n        value={phoneNumber}\n        onChange={(event) => setPhoneNumber(event.target.value)}\n      />\n      <select\n        value={contactType}\n        onChange={(event) => setContactType(event.target.value)}\n      >\n        {contact_types.map((contactTypeValue, idx) => {\n        //   <option value={contactTypeValue} key={idx}>\n        //     {contactTypeValue};\n        //   </option>;\n        })}\n        ;\n      </select>\n      ;<button>Finish Editing</button>\n      <button onClick={wipeActiveContact}>Cancel Editing</button>\n      );\n    </form>\n  );\n};\n\nexport default ContactForm;\n","import React from \"react\";\nimport fetchAPI from \"../api\";\n\nconst CommentList = (props) => {\n    const {comments, contact, removeComment} = props;\n\n    return comments.length ? (\n        <div>\n            <h3>{contact.name}'s comments</h3>\n            {comments.map((comment, idx) => {\n                return (<div key={idx}>\n                    <p>{comment.contents}</p>\n                    <button onClick={() => {\n                        fetchAPI(\"https://univ-contact-book.herokuapp.com/api/comments/${comment.id}\", \"delete\")\n                        .then(function (data) {\n                          removeComment(contact, comment);\n                        })\n                        .catch(function (error) {\n                          console.error('error removing comments', error);\n                        })\n                    }}>Delete</button>\n                </div>);\n            })}\n        </div>\n    ) : null;\n};\n\nexport default CommentList;","import React, {useState} from \"react\";\nimport fetchAPI from \"../api\";\n\nconst CommentForm = (props) => {\n    const {contact, addComment} = props;\n    const [content, setContent] = useState(\"\");\n\n    return (\n        <form\n        onSubmit={(event) => {\n            event.preventDefault();\n            const contactInfo = {content};\n            const url = \"https://univ-contact-book.herokuapp.com/api/contacts/${contact.id}/comments\";\n            fetchAPI(url, \"POST\", contactInfo)\n                .then(function (response){\n                    addComment(contact, response.comment);\n                    setContent(\"\");\n                })\n                .catch(function (error){\n                    console.error(\"error submitting comment\", error);\n                })\n        }}>\n            <h2>Leave a comment for {contact.name}</h2>\n            <input \n                type=\"text\"\n                value={content}\n                onChange={(event) => setContent(event.target.value)}/>\n            <button>Submit</button>;\n        </form>\n    )\n};\n\nexport default CommentForm;","import React from \"react\";\nimport fetchAPI from \"../api\";\nimport CommentList from \"./CommentList\";\nimport NewCommentForm from \"./NewCommentForm\";\n\nconst ContactList = (props) => {\n    const {contacts, setActiveContact, removeOldContact, addComment, removeComment} = props;\n\n    return (\n        <div>\n            {contacts.map((contact, idx) => {\n                const {name, email, address, phoneNumber, contactType} = contact;\n\n                return (\n                    <div key={idx}>\n                        <h2>\n                            {name} ({contactType})\n                        </h2>\n                        <h5>Email: {email}</h5>\n                        <h5>Address: {address}</h5>\n                        <h5>Phone Number: {phoneNumber}</h5>\n                        <div>\n                            <button onClick={() => setActiveContact(contact)}>Edit</button>\n                            <button onClick={() => {\n                                fetchAPI(\"https://univ-contact-book.herokuapp.com/api/contacts/${contact.id}\", \"Delete\")\n                                .then(function (data) {\n                                  removeOldContact(contact);\n                                })\n                                .catch(function (error) {\n                                  console.error('error removing contact', error);\n                                })\n                            }}>Delete</button>\n                        </div>\n                        <CommentList\n                            contact={contact}\n                            comments={contact.comments}\n                            removeComment={removeComment}/>\n                        <NewCommentForm \n                            contact={contact}\n                            addComment={addComment}/>\n                    </div>\n                );\n            })};\n        </div>\n    )\n};\n\nexport default ContactList;","import React, {useState, useEffect} from 'react';\nimport fetchAPI from \"./api\";\nimport NewContactForm from \"./components/NewContactForm\";\nimport EditContactForm from \"./components/EditContactForm\";\nimport ContactList from \"./components/ContactList\";\n\n\nconst App = () => {\n  const [contacts, setContacts] = useState([]);\n  const [activeContact, setActiveContact] = useState(null);\n\n  useEffect(() => {\n    fetchAPI(\"https://univ-contact-book.herokuapp.com/api/contacts\")\n      .then(function (data) {\n    console.log('my contacts', data);\n  })\n  .catch(function (error) {\n    console.error('error fetching contacts', error);\n  })\n  }, []);\n\n  const wipeActiveContact = () => setActiveContact(null);\n\n  const addContact = (contact) => {\n    contact.comments = contact.comments || [];\n    setContacts([...contacts, contact]);\n  }\n\n  const removeOldContact = (deletedContact) => setContacts(contacts.filter((contact) => contact !== deletedContact));\n\n\n  const replaceContact = (oldContactInfo, newContactInfo) => {\n    const newContactsList = contacts.map((contact) => {\n      if (contact === oldContactInfo) {\n        return newContactInfo;\n      }\n      return contact;\n    });\n    setContacts(newContactsList);\n  };\n\n  const addComment = (contact, comment) => {\n    const newContactsList = [...contacts];\n    const idx = newContactsList.indexOf(contact);\n\n    newContactsList[idx].comments.push(comment);\n    setContacts(newContactsList);\n  }\n\n  const removeComment = (contact, deletedComment) => {\n    const newContactsList = [...contacts];\n    const idx = newContactsList.indexOf(contact);\n\n    newContactsList[idx].comments = newContactsList[idx].comments.filter((comment) => comment !== deletedComment);\n    setContacts(newContactsList);\n  };\n\n  return (\n    <>\n      {activeContact ? (<EditContactForm\n                          activeContact={activeContact}\n                          wipeActiveContact={wipeActiveContact}\n                          replaceContact={replaceContact}\n                          />) : (<NewContactForm addContact={addContact}/>)}\n                          <ContactList\n                            contacts={contacts}\n                            setActiveContact={setActiveContact}\n                            removeOldContact={removeOldContact}/>\n                            </>\n  );\n\n\n};\n\nexport default App;"],"sourceRoot":""}